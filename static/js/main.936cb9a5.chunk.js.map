{"version":3,"sources":["components/GradeEntry.js","components/Results.js","App.js","index.js"],"names":["GradeEntry","props","titles","items","i","length","push","key","type","onChange","name","autoComplete","className","min","max","defaultValue","onSubmit","averageGradeWithoutDrop","grades","sum","reduce","a","b","count","forEach","element","makeTable","tableRows","Math","slice","zeroPosted","Object","entries","value","requiredGrade","gradeForTable","Results","avg","table","round","App","handleChange","event","target","state","parseInt","setState","handleSubmit","preventDefault","isSubmitted","handleReset","Array","fill","bind","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.936cb9a5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction GradeEntry(props) {\r\n  const titles = [\"Test 1\", \"Test 2\", \"Test 3\", \"Test 4\", \"Test 5\", \"Homework\"];\r\n  const items = []\r\n\r\n  // Create  boxes\r\n  for (var i = 0; i< titles.length; i++) {\r\n    items.push(\r\n      <label key={i}>\r\n      {titles[i]}:\r\n      <input\r\n        type=\"number\"\r\n        onChange={props.onChange}\r\n        name={i}\r\n        autoComplete=\"off\"\r\n        className=\"form-control\"\r\n        // required\r\n        min=\"0\"\r\n        max=\"100\"\r\n        defaultValue=\"80\"\r\n      />\r\n    </label>\r\n    )\r\n  }\r\n\r\n  // Return the form\r\n  return (\r\n    <div className=\"form-group col\">\r\n      <label>Enter your grades in the form below.</label>\r\n      <form onSubmit={props.onSubmit}>\r\n        {items}\r\n        <button className=\"btn btn-primary\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GradeEntry;\r\n","import React from \"react\";\r\n\r\nconst averageGradeWithoutDrop = grades => {\r\n  // Calculate the average of the inputed grades\r\n  const sum = grades.reduce((a, b) => a + b);\r\n  var count = 0;\r\n  grades.forEach(function(element) {\r\n    if (element) {\r\n      count++;\r\n    }\r\n  });\r\n  return count > 0 ? sum / count : \"\";\r\n};\r\n\r\n\r\nconst makeTable = grades => {\r\n  const gradeTable = {\r\n    \"A\" : 94,\r\n    \"A-\": 90,\r\n    \"B+\": 87,\r\n    \"B\" : 84,\r\n    \"B-\": 80,\r\n    \"C+\": 77,\r\n    \"C\" : 74,\r\n    \"C-\": 70,\r\n    \"D+\": 67,\r\n    \"D\" : 64,\r\n    \"D-\": 60,\r\n  };\r\n\r\n  const tableRows = [];\r\n  const sum = grades.reduce((a, b) => a + b);\r\n\r\n  // Drop lowest test (not homework) grade\r\n  const min = Math.min(...grades.slice(0,grades.length));\r\n\r\n  // Boolean to stop generating \r\n  var zeroPosted = false;\r\n\r\n  for (const [key, value] of Object.entries(gradeTable)) {\r\n    // Calculate Score on the Final\r\n    const requiredGrade = grades.length * value - (sum - min);\r\n    var gradeForTable = '';\r\n\r\n    if (requiredGrade < 0) {\r\n      gradeForTable = 0;\r\n      zeroPosted = true;\r\n    } else {\r\n      gradeForTable = requiredGrade;\r\n    }\r\n\r\n    // Create table row\r\n    tableRows.push(\r\n      <tr key={key}>\r\n        <td>{key}</td>\r\n        <td>{gradeForTable}</td>\r\n      </tr>\r\n    )\r\n    \r\n    // Finish table if looking at negative test scores\r\n    if (zeroPosted) { break };\r\n  }\r\n  return tableRows;\r\n  \r\n};\r\n\r\nfunction Results(props) {\r\n  const avg = averageGradeWithoutDrop(props.grades);\r\n  const min = Math.min(...props.grades);\r\n  const table = makeTable(props.grades);\r\n\r\n  return (\r\n    <div>\r\n      <p>Average (no dropped): {Math.round(avg * 100) / 100}</p>\r\n      <p>Dropped Grade: {min}</p>\r\n\r\n      <p>\r\n        In order to obtain the <em>Desired Course Grade</em>, you must earn the\r\n        specified <em>Score on the Final</em>.\r\n      </p>\r\n\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Desired Course Grade</th>\r\n            <th>Score on the Final</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{table}</tbody>\r\n      </table>\r\n\r\n      <form className=\"form-group\" onSubmit={props.onSubmit}>\r\n        <button className=\"btn btn-primary\">Reset</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport GradeEntry from \"./components/GradeEntry\";\r\nimport Results from \"./components/Results\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      grades: Array(6).fill(80),\r\n      isSubmitted: false\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n  }\r\n\r\n  handleChange = event => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    const grades = this.state.grades.slice();\r\n\r\n    grades[name - 1] = parseInt(value, 10);\r\n\r\n    this.setState({\r\n      grades: grades\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.setState({ isSubmitted: true });\r\n  };\r\n\r\n  handleReset = event => {\r\n    this.setState({\r\n      grades: Array(6).fill(null),\r\n      isSubmitted: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fuild\">\r\n        <div className=\"page-header\">\r\n          <h3>Eplorations in Mathematics Grader</h3>\r\n        </div>\r\n\r\n        {/* Grade Entry */}\r\n        <div className=\"grade-entry\">\r\n          {!this.state.isSubmitted && (\r\n            <GradeEntry\r\n              onSubmit={this.handleSubmit}\r\n              onChange={this.handleChange}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* Results */}\r\n        <div className=\"results\">\r\n          {this.state.isSubmitted && (\r\n            <Results\r\n              grades={this.state.grades}\r\n              requiredGrade={this.state.requiredGrade}\r\n              onSubmit={this.state.handleReset}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  grades: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n  isSubmitted: PropTypes.bool\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}